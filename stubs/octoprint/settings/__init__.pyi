from _typeshed import Incomplete
from octoprint.schema.config import Config as Config
from octoprint.util import CaseInsensitiveSet as CaseInsensitiveSet, atomic_write as atomic_write, deprecated as deprecated, dict_merge as dict_merge, fast_deepcopy as fast_deepcopy, generate_api_key as generate_api_key, is_hidden_path as is_hidden_path, time_this as time_this, yaml as yaml
from typing import Any

def settings(init: bool = False, basedir: Incomplete | None = None, configfile: Incomplete | None = None, overlays: Incomplete | None = None): ...

default_settings: Incomplete
valid_boolean_trues: Incomplete

class NoSuchSettingsPath(Exception): ...
class InvalidSettings(Exception): ...

class InvalidYaml(InvalidSettings):
    file: Incomplete
    error: Incomplete
    def __init__(self, file, error: Incomplete | None = None) -> None: ...

class DuplicateFolderPaths(InvalidSettings):
    folders: Incomplete
    duplicates: Incomplete
    def __init__(self, folders) -> None: ...

class HierarchicalChainMap:
    @staticmethod
    def from_layers(*layers: dict[str, Any]) -> HierarchicalChainMap: ...
    def __init__(self, *maps: dict[str, Any]) -> None: ...
    def deep_dict(self) -> dict[str, Any]: ...
    def has_path(self, path: list[str], only_local: bool = False, only_defaults: bool = False) -> bool: ...
    def get_by_path(self, path: list[str], only_local: bool = False, only_defaults: bool = False, merged: bool = False) -> Any: ...
    def set_by_path(self, path: list[str], value: Any) -> None: ...
    def del_by_path(self, path: list[str]) -> None: ...
    def with_config_defaults(self, config: dict[str, Any] = None, defaults: dict[str, Any] = None) -> HierarchicalChainMap: ...
    def with_layers(self, *layers: dict[str, Any]) -> HierarchicalChainMap: ...
    @property
    def top_map(self) -> dict[str, Any]: ...
    @top_map.setter
    def top_map(self, value) -> None: ...
    @property
    def bottom_map(self) -> dict[str, Any]: ...
    def insert_map(self, pos: int, d: dict[str, Any]) -> None: ...
    def delete_map(self, pos: int) -> None: ...
    @property
    def all_layers(self) -> list[dict[str, Any]]: ...

class Settings:
    OVERLAY_KEY: str
    flagged_basefolders: Incomplete
    def __init__(self, configfile: Incomplete | None = None, basedir: Incomplete | None = None, overlays: Incomplete | None = None) -> None: ...
    def sanity_check_folders(self, folders: Incomplete | None = None) -> None: ...
    def warn_about_risky_settings(self) -> None: ...
    @property
    def effective(self): ...
    @property
    def effective_yaml(self): ...
    @property
    def effective_hash(self): ...
    @property
    def config_yaml(self): ...
    @property
    def config_hash(self): ...
    @property
    def config(self): ...
    @property
    def last_modified(self): ...
    @property
    def last_modified_or_made_dirty(self): ...
    def load(self, migrate: bool = False) -> None: ...
    def load_overlays(self, overlays, migrate: bool = True) -> None: ...
    def load_overlay(self, overlay, migrate: bool = True): ...
    def add_overlay(self, overlay, at_end: bool = False, key: Incomplete | None = None, deprecated: Incomplete | None = None, replace: bool = False): ...
    def remove_overlay(self, key): ...
    def add_path_update_callback(self, path, callback) -> None: ...
    def remove_path_update_callback(self, path, callback) -> None: ...
    def backup(self, suffix: Incomplete | None = None, path: Incomplete | None = None, ext: Incomplete | None = None, hidden: bool = False): ...
    def save(self, force: bool = False, trigger_event: bool = False): ...
    def has(self, path, **kwargs): ...
    def get(self, path, **kwargs): ...
    def getInt(self, path, **kwargs): ...
    def getFloat(self, path, **kwargs): ...
    def getBoolean(self, path, **kwargs): ...
    def checkBaseFolder(self, type): ...
    def getBaseFolder(self, type, create: bool = True, allow_fallback: bool = True, check_writable: bool = True, deep_check_writable: bool = False): ...
    def listScripts(self, script_type): ...
    def loadScript(self, script_type, name, context: Incomplete | None = None, source: bool = False): ...
    def remove(self, path, config: Incomplete | None = None, error_on_path: bool = False, defaults: Incomplete | None = None) -> None: ...
    def set(self, path, value, force: bool = False, defaults: Incomplete | None = None, config: Incomplete | None = None, preprocessors: Incomplete | None = None, error_on_path: bool = False, *args, **kwargs) -> None: ...
    def setInt(self, path, value, **kwargs) -> None: ...
    def setFloat(self, path, value, **kwargs) -> None: ...
    def setBoolean(self, path, value, **kwargs) -> None: ...
    def setBaseFolder(self, type, path, force: bool = False, validate: bool = True) -> None: ...
    def saveScript(self, script_type, name, script) -> None: ...
    def generateApiKey(self): ...
    def deleteApiKey(self) -> None: ...
