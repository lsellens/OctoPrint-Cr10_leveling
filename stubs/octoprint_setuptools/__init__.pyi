from _typeshed import Incomplete
from distutils.command.clean import clean as _clean
from setuptools import Command

def package_data_dirs(source, sub_folders): ...
def recursively_handle_files(directory, file_matcher, folder_matcher: Incomplete | None = None, folder_handler: Incomplete | None = None, file_handler: Incomplete | None = None): ...
def has_requirement(requirement, requirements): ...

class CleanCommand(_clean):
    user_options: Incomplete
    boolean_options: Incomplete
    source_folder: str
    eggs: Incomplete
    @classmethod
    def for_options(cls, source_folder: str = 'src', eggs: Incomplete | None = None): ...
    orig: Incomplete
    noeggs: Incomplete
    nopyc: Incomplete
    def initialize_options(self) -> None: ...
    all: bool
    def finalize_options(self) -> None: ...
    def run(self): ...

class NewTranslation(Command):
    description: str
    user_options: Incomplete
    boolean_options: Incomplete
    pot_file: Incomplete
    output_dir: Incomplete
    @classmethod
    def for_options(cls, pot_file: Incomplete | None = None, output_dir: Incomplete | None = None): ...
    babel_init_messages: Incomplete
    def __init__(self, dist, **kw) -> None: ...
    locale: Incomplete
    def initialize_options(self) -> None: ...
    def finalize_options(self) -> None: ...
    def run(self) -> None: ...

class ExtractTranslation(Command):
    description: str
    user_options: Incomplete
    boolean_options: Incomplete
    mail_address: str
    copyright_holder: str
    mapping_file: Incomplete
    pot_file: Incomplete
    input_dirs: Incomplete
    @classmethod
    def for_options(cls, mail_address: str = 'i18n@octoprint.org', copyright_holder: str = 'The OctoPrint Project', mapping_file: Incomplete | None = None, pot_file: Incomplete | None = None, input_dirs: Incomplete | None = None): ...
    babel_extract_messages: Incomplete
    def __init__(self, dist, **kw) -> None: ...
    def initialize_options(self) -> None: ...
    def finalize_options(self) -> None: ...
    def run(self) -> None: ...

class RefreshTranslation(Command):
    description: str
    user_options: Incomplete
    boolean_options: Incomplete
    mail_address: str
    copyright_holder: str
    mapping_file: Incomplete
    pot_file: Incomplete
    input_dirs: Incomplete
    output_dir: Incomplete
    @classmethod
    def for_options(cls, mail_address: str = 'i18n@octoprint.org', copyright_holder: str = 'The OctoPrint Project', mapping_file: Incomplete | None = None, pot_file: Incomplete | None = None, input_dirs: Incomplete | None = None, output_dir: Incomplete | None = None): ...
    babel_extract_messages: Incomplete
    babel_update_messages: Incomplete
    def __init__(self, dist, **kw) -> None: ...
    locale: Incomplete
    def initialize_options(self) -> None: ...
    def finalize_options(self) -> None: ...
    def run(self) -> None: ...

class CompileTranslation(Command):
    description: str
    user_options: Incomplete
    boolean_options: Incomplete
    output_dir: Incomplete
    @classmethod
    def for_options(cls, output_dir: Incomplete | None = None): ...
    babel_compile_messages: Incomplete
    def __init__(self, dist, **kw) -> None: ...
    def initialize_options(self) -> None: ...
    def finalize_options(self) -> None: ...
    def run(self) -> None: ...

class BundleTranslation(Command):
    description: str
    user_options: Incomplete
    boolean_options: Incomplete
    source_dir: Incomplete
    target_dir: Incomplete
    @classmethod
    def for_options(cls, source_dir: Incomplete | None = None, target_dir: Incomplete | None = None): ...
    locale: Incomplete
    def initialize_options(self) -> None: ...
    def finalize_options(self) -> None: ...
    def run(self) -> None: ...

class PackTranslation(Command):
    description: str
    user_options: Incomplete
    boolean_options: Incomplete
    source_dir: Incomplete
    pack_name_prefix: Incomplete
    pack_path_prefix: Incomplete
    @classmethod
    def for_options(cls, source_dir: Incomplete | None = None, pack_name_prefix: Incomplete | None = None, pack_path_prefix: Incomplete | None = None): ...
    locale: Incomplete
    author: Incomplete
    target: Incomplete
    def initialize_options(self) -> None: ...
    def finalize_options(self) -> None: ...
    def run(self) -> None: ...

def get_babel_commandclasses(pot_file: Incomplete | None = None, mapping_file: str = 'babel.cfg', input_dirs: str = '.', output_dir: Incomplete | None = None, pack_name_prefix: Incomplete | None = None, pack_path_prefix: Incomplete | None = None, bundled_dir: Incomplete | None = None, mail_address: str = 'i18n@octoprint.org', copyright_holder: str = 'The OctoPrint Project'): ...
def create_plugin_setup_parameters(identifier: str = 'todo', name: str = 'TODO', version: str = '0.1', description: str = 'TODO', author: str = 'TODO', mail: str = 'todo@example.com', url: str = 'TODO', license: str = 'AGPLv3', source_folder: str = '.', additional_data: Incomplete | None = None, additional_packages: Incomplete | None = None, ignored_packages: Incomplete | None = None, requires: Incomplete | None = None, extra_requires: Incomplete | None = None, cmdclass: Incomplete | None = None, eggs: Incomplete | None = None, package: Incomplete | None = None, dependency_links: Incomplete | None = None): ...
