import io
from _typeshed import Incomplete
from octoprint import UMASK as UMASK
from octoprint.util import atomic_write as atomic_write

class AbstractFileWrapper:
    DEFAULT_PERMISSIONS: int
    filename: Incomplete
    def __init__(self, filename) -> None: ...
    def save(self, path, permissions: Incomplete | None = None) -> None: ...
    def stream(self) -> None: ...

class DiskFileWrapper(AbstractFileWrapper):
    path: Incomplete
    move: Incomplete
    def __init__(self, filename, path, move: bool = True) -> None: ...
    def save(self, path, permissions: Incomplete | None = None) -> None: ...
    def stream(self): ...

class StreamWrapper(AbstractFileWrapper):
    streams: Incomplete
    def __init__(self, filename, *streams) -> None: ...
    def save(self, path, permissions: Incomplete | None = None) -> None: ...
    def stream(self): ...

class MultiStream(io.RawIOBase):
    streams: Incomplete
    current_stream: int
    def __init__(self, *streams) -> None: ...
    def read(self, n: int = -1): ...
    def readinto(self, b): ...
    def close(self) -> None: ...
    def readable(self, *args, **kwargs): ...
    def seekable(self, *args, **kwargs): ...
    def writable(self, *args, **kwargs): ...

class LineProcessorStream(io.RawIOBase):
    input_stream: Incomplete
    leftover: Incomplete
    def __init__(self, input_stream) -> None: ...
    def read(self, n: int = -1): ...
    def readinto(self, b): ...
    def process_line(self, line): ...
    def close(self) -> None: ...
    def readable(self, *args, **kwargs): ...
    def seekable(self, *args, **kwargs): ...
    def writable(self, *args, **kwargs): ...
