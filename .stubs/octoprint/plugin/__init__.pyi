from octoprint.plugin.types import *
from _typeshed import Incomplete
from octoprint.plugin.core import Plugin as Plugin, PluginInfo as PluginInfo, PluginManager as PluginManager
from octoprint.plugin.types import OctoPrintPlugin as OctoPrintPlugin, SettingsPlugin as SettingsPlugin
from octoprint.util import deprecated as deprecated

class PluginFlags:
    AUTOESCAPE_ON: str
    AUTOESCAPE_OFF: str

def plugin_manager(init: bool = False, plugin_folders: Incomplete | None = None, plugin_bases: Incomplete | None = None, plugin_entry_points: Incomplete | None = None, plugin_disabled_list: Incomplete | None = None, plugin_sorting_order: Incomplete | None = None, plugin_blacklist: Incomplete | None = None, plugin_restart_needing_hooks: Incomplete | None = None, plugin_obsolete_hooks: Incomplete | None = None, plugin_considered_bundled: Incomplete | None = None, plugin_flags: Incomplete | None = None, plugin_validators: Incomplete | None = None, compatibility_ignored_list: Incomplete | None = None): ...
def plugin_settings(plugin_key, defaults: Incomplete | None = None, get_preprocessors: Incomplete | None = None, set_preprocessors: Incomplete | None = None, settings: Incomplete | None = None): ...
def plugin_settings_for_settings_plugin(plugin_key, instance, settings: Incomplete | None = None): ...
def call_plugin(types, method, args: Incomplete | None = None, kwargs: Incomplete | None = None, callback: Incomplete | None = None, error_callback: Incomplete | None = None, sorting_context: Incomplete | None = None, initialized: bool = True, manager: Incomplete | None = None) -> None: ...

class PluginSettings:
    settings: Incomplete
    plugin_key: Incomplete
    defaults: Incomplete
    get_preprocessors: Incomplete
    set_preprocessors: Incomplete
    access_methods: Incomplete
    deprecated_access_methods: Incomplete
    def __init__(self, settings, plugin_key, defaults: Incomplete | None = None, get_preprocessors: Incomplete | None = None, set_preprocessors: Incomplete | None = None) -> None: ...
    def global_has(self, path, **kwargs): ...
    def global_remove(self, path, **kwargs): ...
    def global_get(self, path, **kwargs): ...
    def global_get_int(self, path, **kwargs): ...
    def global_get_float(self, path, **kwargs): ...
    def global_get_boolean(self, path, **kwargs): ...
    def global_set(self, path, value, **kwargs) -> None: ...
    def global_set_int(self, path, value, **kwargs) -> None: ...
    def global_set_float(self, path, value, **kwargs) -> None: ...
    def global_set_boolean(self, path, value, **kwargs) -> None: ...
    def global_get_basefolder(self, folder_type, **kwargs): ...
    def get_plugin_logfile_path(self, postfix: Incomplete | None = None): ...
    def get_plugin_data_folder(self): ...
    def get_all_data(self, **kwargs): ...
    def clean_all_data(self) -> None: ...
    def __getattr__(self, item): ...
